/*
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.spanner.types.generator;

import com.google.cloud.spanner.types.generator.TemplatedCode.ParsedFileChunks;
import com.google.cloud.spanner.types.generator.TemplatedCode.ParsedFileChunks.Chunk;
import java.text.ParseException;
import java.util.List;
import java.util.Optional;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.junit.Before;
import org.junit.Test;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertThrows;
import static org.junit.Assert.assertTrue;


public class TemplatedCodeTest {

  private static final String SAMPLE_SECTION_1_START_STRING =
      "#AutogenSectionStart, TargetFile=com/google/cloud/spanner/AbstractResultSet.java\n\n";

  private static final String SAMPLE_SECTION_2_START_STRING =
      "#AutogenSectionStart, TargetFile=com/google/cloud/spanner/AbstractStructReader.java\n\n";

  private static final String SAMPLE_SECTION_END_STRING = "#AutogenSectionEnd\n";

  private static final String SAMPLE_CHUNK_1 = "#AutogenChunkId=imports\n\n"
      + "import java.math.BigDecimal;\n";

  private static final String SAMPLE_CHUNK_2 = "#AutogenChunkId=body\n\n"
      + "  @Override\n"
      + "  protected BigDecimal getBigDecimalInternal(int columnIndex) {\n"
      + "    return currRow().getBigDecimalInternal(columnIndex);\n"
      + "  }\n\n"
      + "  @Override\n"
      + "  protected List<BigDecimal> getBigDecimalListInternal(int columnIndex) {\n"
      + "    return currRow().getBigDecimalListInternal(columnIndex);\n"
      + "  }\n";

  private static final String SAMPLE_TEMPLATE_STRING_SHORT =
      SAMPLE_SECTION_1_START_STRING + SAMPLE_CHUNK_1 + SAMPLE_CHUNK_2 + SAMPLE_SECTION_END_STRING;

  private static final String SAMPLE_TEMPLATE_STRING_LONG =
      SAMPLE_SECTION_1_START_STRING + SAMPLE_CHUNK_1 + SAMPLE_CHUNK_2 + SAMPLE_SECTION_END_STRING
          + SAMPLE_SECTION_2_START_STRING + SAMPLE_CHUNK_1 + SAMPLE_SECTION_END_STRING;

  private static final String SAMPLE_SECTION_BODY_WITHOUT_FILENAME =
      "#AutogenSectionStart\n\n" + SAMPLE_CHUNK_1;

  private TemplatedCode templatedCode;

  @Before
  public void setUp() {
    templatedCode = new TemplatedCode();
  }

  @Test
  public void nextTagOffsetTest() {
    System.out.println(SAMPLE_TEMPLATE_STRING_SHORT);
    assertEquals(0, templatedCode.nextTagOffset(SAMPLE_TEMPLATE_STRING_SHORT, 0,
        "#AutogenSectionStart"));
    assertEquals(197, templatedCode.nextTagOffset(SAMPLE_TEMPLATE_STRING_SHORT, 1,
        "#AutogenSectionStart"));
    assertEquals(82, templatedCode.nextTagOffset(SAMPLE_TEMPLATE_STRING_SHORT, 0,
        "#AutogenChunkId"));
  }

  @Test
  public void extractFileNameFromSectionStartTagTest() throws ParseException {
    assertEquals("com/google/cloud/spanner/AbstractResultSet.java",
        templatedCode.extractFileNameFromSectionStartTag(SAMPLE_SECTION_1_START_STRING));
  }

  @Test
  public void extractFileNameFromInvalidSectionStartTagTest() throws ParseException {
    assertThrows(ParseException.class, () -> templatedCode.extractFileNameFromSectionStartTag(
        SAMPLE_SECTION_BODY_WITHOUT_FILENAME));
  }

  @Test
  public void extractChunkIdFromChunkStartTest() throws ParseException {
    System.out.println(SAMPLE_TEMPLATE_STRING_SHORT);
    System.out.println(SAMPLE_TEMPLATE_STRING_LONG);
    assertEquals("imports",
        templatedCode.extractChunkIdFromChunkStart(SAMPLE_TEMPLATE_STRING_SHORT, 82));
    assertEquals("body",
        templatedCode.extractChunkIdFromChunkStart(SAMPLE_TEMPLATE_STRING_SHORT, 136));
  }

  @Test
  public void lineHasAutogeneratedMarkerTest() {
    String line = "prefixabc";
    Pattern pattern = Pattern.compile("^prefix(.*)$");
    Matcher matcher = pattern.matcher(line);
    assertTrue(matcher.matches());
    assertEquals("prefixabc", matcher.group(0));
    assertEquals("abc", matcher.group(1));

    pattern = Pattern.compile("^.*(//.*) #([a-zA-Z0-9_-]+).*$");
    matcher = pattern.matcher("// Start-autogenerated-code #body");
    assertTrue(matcher.matches());
    // for (int i = 0 ; i < matcher.groupCount() ; i++) {
    //   System.out.println(matcher.group(i + 1));
    // }
    assertEquals("body", matcher.group(2));

    matcher = pattern.matcher("     // Start-autogenerated-code #body. blah");
    assertTrue(matcher.matches());
    // for (int i = 0 ; i < matcher.groupCount() ; i++) {
    //   System.out.println(matcher.group(i + 1));
    // }
    assertEquals("body", matcher.group(2));

    Optional<String> chunkId = templatedCode.getChunkIdFromSourceLine(
        "// Start-autogenerated-code #body");
    assertTrue(chunkId.isPresent());
    assertEquals("body", chunkId.get());
    chunkId = templatedCode.getChunkIdFromSourceLine(
        "   //      Start-autogenerated-code    #imports. blah");
    assertTrue(chunkId.isPresent());
    assertEquals("imports", chunkId.get());
  }

  @Test
  public void extractChunksFromSectionTest() throws ParseException {
    ParsedFileChunks fileChunks = templatedCode.extractChunksFromSection(
        SAMPLE_TEMPLATE_STRING_SHORT);
    assertEquals("com/google/cloud/spanner/AbstractResultSet.java",
        fileChunks.getTargetFile());
    List<Chunk> chunks = fileChunks.getChunks();
    assertEquals("imports", chunks.get(0).getChunkId());
    assertEquals("import java.math.BigDecimal;", chunks.get(0).getChunkText().trim());
    assertEquals("body", chunks.get(1).getChunkId());
    assertEquals(SAMPLE_CHUNK_2.substring("#AutogenChunkId=body\n\n".length()).trim(),
        chunks.get(1).getChunkText().trim());
  }
}
